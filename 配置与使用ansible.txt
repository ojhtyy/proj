########################################
Ansible简单入门
########################################
二、ansible安装 ,在主服务器安装即可 ,被监控的机器不需要安装
	 
   离线安装:  
	    上传包 解压: 
			mkdir ansible
			cd ansible
			tar -zxvf rpmansible. tar.gz
			rpm -ivh *.rpm
			 


  安装方法1:使用pip（python的包管理模块）安装
		pip install ansible (需要先安装pip)
		#如果没pip,需先安装pip.yum可直接安装：
		yum install python-pip
		pip install ansible
		
		如果是离线,上传包, 再 pip install
	
   在线安装:安装方法2:
		#下载yum源
		wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo
		#安装epel
		yum -y install epel-release
		#安装ansible
		yum -y install ansible


解决:Using a SSH password instead of a key is not possible because Host Key checking is enabled and sshpass does not support this.  Please add this host's finger		
	
	sed 's/#host_key_checking/host_key_checking/g' /etc/ansible/ansible.cfg -i
		
		
2 修改 /etc/ansible/hosts 文件
#文件最后面追加如下
#定义 groupsname
	方法1:不需要配置互信
		[hadoopserver]
		#加入IP列表,用户,密码
		172.18.16.17 	ansible_ssh_host=172.18.16.17  ansible_ssh_port=22 ansible_ssh_user=root ansible_ssh_pass=fabao123
		172.18.16.18 	ansible_ssh_host=172.18.16.18  ansible_ssh_port=22 ansible_ssh_user=root ansible_ssh_pass=fabao123

	2:如果配置互信(主机生成pub, 传到被管理主机) ,则只配置IP 或 主机名(需要配置/etc/hosts)即可 
		[hadoopserver]
		hdp1
		hdp2
		hdp3
		
# 以上是不需要配置互信 ,配置互信可以不用在配置文件指定密码

###########################     使用       ###################################
格式:ansible  <host-pattern>  [-f forks] [-m module_name]  [-a args]
	<host-pattern>	指明管控主机，以模式形式表示或者直接给定 IP ，必须事先定义在文件中； all 设置所有
	[-f forks]	指明每批管控多少主机，默认为 5 个主机一批次
	[-m module_name]	使用何种模块管理操作，所有的操作都需要通过模块来指定
	[-a args]	指明模块专用参数； args 一般为 key=value 格式


3 批量执行脚本: 向 hadoopserver 组的主机执行脚本,  
	ansible hadoopserver  -m script -a '/etc/ansible/scripts/test.sh' 

  需要向所有组的主机执行 用 all
	ansible all  -m script -a '/etc/ansible/scripts/test.sh' 
	
	脚本:/etc/ansible/scripts/test.sh
	#!/bin/bash
	source ~/.bash_profile
	sqlplus / as sysdba <<EOF
	select count(*) from dba_users;
	exit;
	EOF

4:执行命令 
	1:shell模块 ：远程主机在shell进程下运行命令，支持shell特性，当然也支持管道
		ansible hadoopserver -m shell -a "ls /tmp |wc -l"
		
		ansible hadoopserver -m shell -a "echo 'export ZOOKEEPER_HOME=/usr/local/zookeeper-3.4.9'>>/etc/profile ;
		echo 'export PATH=\$PATH:\$ZOOKEEPER_HOME/bin'>>/etc/profile ;
		source /etc/profile
		"
	
	2:command模块：远程主机上运行命令
		ansible WebServers -m command -a "ls /tmp"
		command模块可以省略，此命令可以直接写为：
			ansible WebServers -a "ls /tmp"
		
	
#复制本地 目录 到远程:

	#需要安装rsync
	yum install rsync -y
	ansible hadoopserver -m shell -a 'yum install rsync -y'
	ansible hadoopserver -m synchronize -a 'src=/tmp/root/ dest=/tmp/hdp1'
	
5:复制本地 文件 或非空目录到远程(空目录不复制 不建议使用) copy模块： 可以指定mode（权限）、own（所属主）、group（所属组）
	ansible all -m copy -a "src=/tmp/abc.txt dest=/root/  mode=644 owner=ansible1 group=root"
	ansible all -m copy -a "src=/tmp/abc.txt dest=/root/"
	
	参考:https://blog.csdn.net/modoo_junko/article/details/45080415
	
	
6:复制远程文件到本地 fetch模块：和copy相反，从远程主机拷贝文件到本地主机 ,文
	 ansible hadoopserver -m fetch -a "src=/root/a.txt dest=/root/ flat=yes"
		#文件复制到本机root目录 , 并以远程主机命名的目录下 如: /root/hdp2/root/a.txt
		
		#src="远程主机文件" dest="本地主机" 可以不要flat=yes参数
		#flat=yes作用：
		#当 dest=/root/kel/，abc.txt会保存在/root/kel/目录下
		#当 dest=/root/kel，会拷贝abc.txt文件，并命名为kel

7:定时任务 cron模块：在远程主机制定crontab  
	ansible hadoopserver -m cron -a "minute=*/10 job='/sbin/ntpdate 10.10.10.10 &> /dev/null' name=Synctime1"
	
	#删除远程制定的crontab
	ansible all -m cron -a "state=absent name=Synctime1"    # name="name"
	



#####################################8:使用变量 需要用playbook######################################################

1:向不同主机传不同变量 , 需要在 /etc/ansible/hosts 配置变量
	[hadoopserver]
	hdp1 var1=1 var2='h1'
	hdp2 var1=2 var2='h2'
	hdp3 var1=3 var2='h3'
	
  相同变量:
	[hadoopserver:vars]
	file_name='namesd'

ansible hadoopserver -m shell -a "echo  {{var1}} {{file_name}} >/root/a.txt"	

#编写yaml脚本 需要对齐
vim name.yaml

- hosts: hadoopserver	#指定主机组
  remote_user: root		#远程执行的用户
  vars:
  - pkgname: memcached    # 在playbook内部定义变量，变量名称为pkgname，值为memcached
  tasks:
  - name: write file	  #设置任务名称，非必要 执行时会打印
    shell: echo {{ pkgname }} or {{var1}} and {{var2}}> /root/a.txt    # 使用name={{ pkgname }}调用变量的值
  - name: cat file 		  #每一步都需要指定名
    shell: cat /root/a.txt
	

#执行
ansible-playbook name.yaml 

#只检测可能会发生的改变，但不真正执行操作；
ansible-playbook  --check name.yaml 

#列出运行任务的主机
ansible-playbook  --list-hosts name.yaml 



